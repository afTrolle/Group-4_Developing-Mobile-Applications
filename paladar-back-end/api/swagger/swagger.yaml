swagger: "2.0"
info:
  version: "0.0.1"
  title: Paladar Back-end API
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /client:
    x-swagger-router-controller: client
    
    post:
      summary: Create Client
      description: creates client by recvining client object and sets an clientId and returns the completed object to client.
      operationId: createClient
      parameters:
        - name: client
          in: body
          required: true
          description: client object
          schema:
            $ref: "#/definitions/Client"
      responses:
        200:
          description: Sucessfull
          schema: 
            $ref:  "#/definitions/Client"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
    get:
      summary: get client by Id
      description: returns client object
      operationId: getClientById
      parameters:
        - name: id
          in: query
          description: Id of the client
          required: false
          type: integer
          format: int64
      responses:
        200:
          description: Sucessfull
          schema: 
            $ref:  "#/definitions/Client"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
          
          
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
# Schemas!
definitions:

# main Client 
  Client:
    type: object
    properties:
      clientId:
        type: integer
        format: int64
        description: unique user id, will probably be Oauthtoken from google api or something else
      firstName:
        type: string
        description: users first name
      lastName:
        type: string
        description: users last name
      email:
        type: string
        description:  users email address.
      image:
        type: string
        format: binary
        description: contains user Image (might not be needed)
      Chef:
        $ref: "#/definitions/Chef"
    description: Client object repsents a user client by paladar. every client should be identifiable by their client id or email address
    
# Chef inforamtion holder will hold infromation about being a chef
  Chef:
    type: object
    properties:
      alias:
        type: string
        description: the nick name of the chef (optional)
      summary:
        type: string
        description: summary about the chef sort of a CV where he/she can brage about them selfs
      image:
        type: string
        format: binary
        description: chef image that is presented when viewing dining events
    description: holds all the chef related information. MAY be null if client isn't a chef.

    
#Dining event Main object
  DiningEvent:
    type: object
    required: #maybe more is neeeded
      - title
    properties:
      diningId:
        type: integer
        format: int64
        description: unique identifier of the event. (generated on creation)
      host-id:
        type: integer
        format: int64
        description: unique identifier of the owner of the event aka client-id.
      title:
        type: string
        description: the event title. 
      summary:
        type: string
        description: should contain short summary of the event. (what food will be given)
      image:
        type: string
        format: binary
        description: preferably image of the dish for the event
      date:
        type: string
        format: date
        description: time when the event starts
      lenght:
        type: integer
        format: int32
        minimum: 0
        maximum: 300 
        description: Event lenght in minutes. must be a vaule betwen 0 and 300
      seats:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000
        description: amount of people that can attend the event. must be a value betwen 1 and 1000.
      price:
        type: integer
        format: int32
        minimum: 0
        maximum: 10000000
        description: Price of the event, MUST be betwen 0 and 10000000
      Home:
        $ref: "#/definitions/Home"
      allergies:
        $ref: "#/definitions/FoodAllergies"
      diets:
        $ref: "#/definitions/FoodDiet"
      Attendies:
        type: array
        items: 
          $ref: "#/definitions/Client"
    description: this object repsents an event that a chef has created. 
        
  Home:
    type: object
    properties:
      summary:
        type: string
        description: A small description about the location of the event.
      image:
        type: string
        format: binary
        description: image of the home showcasing the persons home.
      
      location:
        type: object
        properties:
          streetAddress:
            type: string
          floor: 
            type: integer
            format: int32
            minimum: -20
            maximum: 1000
            description: floor of the event.
          lat:
            type: number
            format: double
            description: latitude of location.
          lng:
            type: number
            format: double
            description: longitude of location.
      HomePreferences:
        $ref: "#/definitions/HomePreferences"
    description: Holds Location information about the event.
    
  HomePreferences:
    type: object
    properties:
      isChildrenAllowed:
        type: boolean
        description: if it is allowed to bring children to the event.
      isDogsAllowed:
        type: boolean
      isCatsAllowed:
        type: boolean
      isOtherPetsAllowed:
        type: boolean
      isAlcoholAllowed:
        type: boolean
        description: if a client can bring alcohol. 
      isDogOnLocation:
        type: boolean
        description: Will there be dogs present on the event
      isCatOnLocation:
        type: boolean
        description: Will there be cat present on the event
      isOtherPetOnLocation:
        type: boolean
        description: Will there be other pet present on the event
      isChildrenOnLocation:
        type: boolean
        description: will there be children on the event
    description: indication what is persent and what is allowed. 

  FoodAllergies:
    type: object
    properties:
      lactose:
        type: boolean
      gluten:
        type: boolean
      eggs:
        type: boolean
      nuts:
        type: boolean
      soy:
        type: boolean
      fish:
        type: boolean
      shellfish:
        type: boolean
      chicken:
        type: boolean
      pork:
        type: boolean
      veal:
        type: boolean
      beef:
        type: boolean
      turkey:
        type: boolean
      duck:
        type: boolean
    description: list of what the event dish may contain. used for filtering.
    
  FoodDiet:
    type: object
    properties:
      vegetarian:
        type: boolean
      vegan:
        type: boolean
      rawFood:
        type: boolean
      mediterranean:
        type: boolean
      Halal:
        type: boolean
    description: diffrent food diets might be skiped. 
    
    #Error handling
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string


        


